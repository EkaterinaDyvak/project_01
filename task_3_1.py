# -*- coding: utf-8 -*-
"""task 3.1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gJ9qj2XKDol6oSw6Em2TnGI7jikUJvSp

Задача 3.1
"""

class Matrix:                                                                   #Класс матрица, представляет собой вложенные списки
    def __init__(self, ryad, col=1, value=None):                                 #"метод для инициализации матрицы
        self.__x = ryad
        self.__y = col
        self.__matrix = [[value] * col for _ in range(ryad)]

    def add_value(self, value):                                                 #метод для добавления новых (одинаковых) значений в матрицу
        for i in range(len(self.__matrix)):
            for j in range(len(self.__matrix[i])):
                self.__matrix[i][j] = value

    def set_value(self, ryad, col, value):                                       #метод для добавления/замены значения в определенной ячейке матрицы
        if ryad >= self.__x or col >= self.__y:
            return f'Номер строки/колонки выходит за пределы матрицы'
        self.__matrix[ryad][col] = value

    def set_snake(self):                                                        #метод для заполнения матрицы змейкой
        count = 1

        for i in range(self.__x):
            for j in range(self.__y):
                self.__matrix[i][j] = count
                count += 1

        for i in range(1, self.__x, 2):
            self.__matrix[i].reverse()

    def show_num_rows(self):                                                    #метод для отображения количества строк в матрице
        return self.__x

    def show_num_col(self):                                                     #метод для отображения количества колонок в матрице
        return self.__y

    def print_matrix(self):#                                                     метод для отображения матрицы
        for ryad in self.__matrix:
            print(' '.join((str(i) if i is not None else "None") for i in ryad))

    def print_matrix_snake(self):                                               #метод для отображения матрицы
        for ryad in self.__matrix:
            print(' '.join((str(i).ljust(3) if i is not None else "None") for i in ryad))


m1 = Matrix(3, 5)
m1.print_matrix()

m1.set_value(1, 1, 5)
m1.print_matrix()

m1.set_snake()
m1.print_matrix_snake()